cmake_minimum_required(VERSION 3.16)
# 设置工程名称
set(PROJECT_NAME design_pattern)
 
# 设置工程版本号
set(PROJECT_VERSION "0.0.1" CACHE STRING "default")

# 工程定义
project(${PROJECT_NAME}
    LANGUAGES CXX C 
    VERSION ${PROJECT_VERSION}
)

set(CMAKE_BUILD_TYPE Debug) 
# g++ -std=c++14
set(CMAKE_CXX_STANDARD 14)
set(LIBRARY_OUTPUT_PATH ${CMAKE_SOURCE_DIR}/lib/)

option(BUILD_SAMPLES "build samples" OFF)
option(BUILD_TESTS "build tests" OFF)

## g++ -I 用来涵盖头文件
include_directories(./include)

## g++ -l参数(小写)就是用来指定程序要链接的库，-l参数紧接着就是库名
## 如果库文件没放在上面三个目录里，
## 需要使用-L参数(大写)指定库文件所在目录# -L参数跟着的是库文件所在的目录名
## 这里一般都是外部依赖的库 例如opencv gtest等
# link_libraries()

# FILE(GLOB_RECURSE SRC src/*.cpp)

#生成库文件 SHARED 为.so 动态文件 STATIC 为.a静态文件
# add_library(factory STATIC ${SRC})

# g++ xxx.cpp -o xxx
add_executable(${PROJECT_NAME} main.cpp)

## 这里相当于 g++ -l，一般都是自己所写成的库文件从上面add_library得到
# target_link_libraries(${PROJECT_NAME} factory)


IF(BUILD_SAMPLES)
    ADD_SUBDIRECTORY(samples)
ENDIF()

# set_target_properties(
#         cuda_01_hello_world
#         PROPERTIES
#         CUDA_SEPARABLE_COMPILATION ON)

# CMAKE_INSTALL_PREFIX的默认定义是/usr/local,可以自己设置
# INSTALL(DIRECTORY ${CMAKE_SOURCE_DIR}/lib DESTINATION install)
INSTALL(TARGETS ${PROJECT_NAME} DESTINATION install)